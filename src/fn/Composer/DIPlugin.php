<?php
/**
 * (c) php-fn
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace fn\Composer;

use Composer\Composer;
use Composer\EventDispatcher\EventSubscriberInterface;
use Composer\IO\IOInterface;
use Composer\Plugin\PluginInterface;
use Composer\Script\Event;
use Composer\Script\ScriptEvents;
use Composer\Util\Filesystem;

/**
 */
class DIPlugin implements PluginInterface, EventSubscriberInterface
{
    /**
     * @inheritdoc
     */
    public function activate(Composer $composer, IOInterface $io)
    {
    }

    /**
     * @inheritdoc
     */
    public static function getSubscribedEvents(): array
    {
        return [ScriptEvents::POST_AUTOLOAD_DUMP => 'onAutoloadDump'];
    }

    /**
     * @param Event $event
     */
    public static function onAutoloadDump(Event $event)
    {
        $composer = $event->getComposer();

        $fs        = new Filesystem;
        $vendorDir = $fs->normalizePath(realpath(realpath($composer->getConfig()->get('vendor-dir')))) . '/';

        self::generateAutoloadFile(
            $file = $vendorDir . 'composer/autoload_php-fn-di.php',
            $composer->getPackage()->getExtra()['di'] ?? [],
            $composer->getPackage()->getExtra()['di-config'] ?? []
        );
        $event->getIO()->write("<info>Autoload class '$file' generated</info>");

        self::modifyAutoloadFile($file = $vendorDir . 'autoload.php');
        $event->getIO()->write("<info>Autoload class '$file' modified</info>");
    }

    /**
     * @param string $file
     */
    private static function modifyAutoloadFile(string $file)
    {
        \file_put_contents($file,  \str_replace(
            [
                '@generated by Composer',
                '::getLoader();',
                'return ComposerAutoloaderInit',
            ],
            [
                '@generated by Composer & @modified by php-fn/di',
                '::getLoader());',
                <<<EOF
return call_user_func(function(\$loader) {
    return fn\\Composer\\DIClassLoader::instance(
        \$loader,
        __DIR__ . '/composer/autoload_php-fn-di.php'
    );
}, ComposerAutoloaderInit
EOF
            ],
            \file_get_contents($file)
        ));
    }

    private static function generateAutoloadFile(string $file, $di, $config)
    {
        $classes = \implode(
            PHP_EOL,
            \iterator_to_array(new DIProvider((array)$di, (array)$config)
        ));

        \file_put_contents($file, <<<EOF
<?php
// @generated by php-fn/di

namespace fn {
    define(__NAMESPACE__ . '\VENDOR_DIR', dirname(dirname(__FILE__)) . \DIRECTORY_SEPARATOR);
    define(__NAMESPACE__ . '\BASE_DIR', dirname(VENDOR_DIR) . \DIRECTORY_SEPARATOR);
}

$classes
EOF
        );
    }
}
